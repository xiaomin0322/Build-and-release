// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package javax.management.remote.rmi;

import java.io.IOException;
import java.io.Serializable;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.UnexpectedException;
import javax.rmi.CORBA.Stub;
import javax.rmi.CORBA.Util;
import javax.rmi.PortableRemoteObject;
import org.omg.CORBA.ORB;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.ApplicationException;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.RemarshalException;
import org.omg.CORBA.portable.ResponseHandler;
import org.omg.CORBA.portable.ServantObject;

import javax.management.remote.rmi.*  ;

public class _RMIServer_Stub extends Stub implements RMIServer {
    
    private static final String[] _type_ids = {
        "RMI:javax.management.remote.rmi.RMIServer:0000000000000000"
    };
    
    public String[] _ids() { 
        return _type_ids;
    }
    
    public String getVersion() throws java.rmi.RemoteException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    OutputStream out = _request("_get_version", true);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (String) in.read_value(String.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return getVersion();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("_get_version",RMIServer.class);
            if (so == null) {
                return getVersion();
            }
            try {
                return ((RMIServer)so.servant).getVersion();
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public RMIConnection newClient(Object arg0) throws java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    OutputStream out = _request("newClient", true);
                    Util.writeAny(out,arg0);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (RMIConnection) PortableRemoteObject.narrow(in.read_Object(), RMIConnection.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return newClient(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("newClient",RMIServer.class);
            if (so == null) {
                return newClient(arg0);
            }
            try {
                Object arg0Copy = (Object) Util.copyObject(arg0,_orb());
                RMIConnection result = ((RMIServer)so.servant).newClient(arg0Copy);
                return (RMIConnection)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
}
