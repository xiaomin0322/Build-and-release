// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package javax.management.remote.rmi;

import java.io.IOException;
import java.io.Serializable;
import java.rmi.MarshalledObject;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.UnexpectedException;
import java.util.Set;
import javax.management.AttributeList;
import javax.management.AttributeNotFoundException;
import javax.management.InstanceAlreadyExistsException;
import javax.management.InstanceNotFoundException;
import javax.management.IntrospectionException;
import javax.management.InvalidAttributeValueException;
import javax.management.ListenerNotFoundException;
import javax.management.MBeanException;
import javax.management.MBeanInfo;
import javax.management.MBeanRegistrationException;
import javax.management.NotCompliantMBeanException;
import javax.management.ObjectInstance;
import javax.management.ObjectName;
import javax.management.ReflectionException;
import javax.management.remote.NotificationResult;
import javax.rmi.CORBA.Stub;
import javax.rmi.CORBA.Util;
import javax.security.auth.Subject;
import org.omg.CORBA.ORB;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.ApplicationException;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.RemarshalException;
import org.omg.CORBA.portable.ResponseHandler;
import org.omg.CORBA.portable.ServantObject;

import javax.management.remote.rmi.*  ;

public class _RMIConnection_Stub extends Stub implements RMIConnection {
    
    private static final String[] _type_ids = {
        "RMI:javax.management.remote.rmi.RMIConnection:0000000000000000"
    };
    
    public String[] _ids() { 
        return _type_ids;
    }
    
    public void close() throws java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    OutputStream out = _request("close", true);
                    _invoke(out);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    close();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("close",RMIConnection.class);
            if (so == null) {
                close();
                return ;
            }
            try {
                ((RMIConnection)so.servant).close();
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public String getConnectionId() throws java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    OutputStream out = _request("getConnectionId", true);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (String) in.read_value(String.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return getConnectionId();
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("getConnectionId",RMIConnection.class);
            if (so == null) {
                return getConnectionId();
            }
            try {
                return ((RMIConnection)so.servant).getConnectionId();
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ObjectInstance createMBean(String arg0, ObjectName arg1, Subject arg2) throws javax.management.ReflectionException, javax.management.InstanceAlreadyExistsException, javax.management.MBeanRegistrationException, javax.management.MBeanException, javax.management.NotCompliantMBeanException, java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("createMBean__CORBA_WStringValue__javax_management_ObjectName__javax_security_auth_Subject", true);
                    out.write_value(arg0,String.class);
                    out.write_value(arg1,ObjectName.class);
                    out.write_value(arg2,Subject.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ObjectInstance) in.read_value(ObjectInstance.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:javax/management/ReflectionEx:1.0")) {
                        throw (javax.management.ReflectionException) in.read_value(javax.management.ReflectionException.class);
                    }
                    if ($_id.equals("IDL:javax/management/InstanceAlreadyExistsEx:1.0")) {
                        throw (javax.management.InstanceAlreadyExistsException) in.read_value(javax.management.InstanceAlreadyExistsException.class);
                    }
                    if ($_id.equals("IDL:javax/management/MBeanRegistrationEx:1.0")) {
                        throw (javax.management.MBeanRegistrationException) in.read_value(javax.management.MBeanRegistrationException.class);
                    }
                    if ($_id.equals("IDL:javax/management/MBeanEx:1.0")) {
                        throw (javax.management.MBeanException) in.read_value(javax.management.MBeanException.class);
                    }
                    if ($_id.equals("IDL:javax/management/NotCompliantMBeanEx:1.0")) {
                        throw (javax.management.NotCompliantMBeanException) in.read_value(javax.management.NotCompliantMBeanException.class);
                    }
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return createMBean(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("createMBean__CORBA_WStringValue__javax_management_ObjectName__javax_security_auth_Subject",RMIConnection.class);
            if (so == null) {
                return createMBean(arg0, arg1, arg2);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                String arg0Copy = (String) copies[0];
                ObjectName arg1Copy = (ObjectName) copies[1];
                Subject arg2Copy = (Subject) copies[2];
                ObjectInstance result = ((RMIConnection)so.servant).createMBean(arg0Copy, arg1Copy, arg2Copy);
                return (ObjectInstance)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof javax.management.ReflectionException) {
                    throw (javax.management.ReflectionException)exCopy;
                }
                if (exCopy instanceof javax.management.InstanceAlreadyExistsException) {
                    throw (javax.management.InstanceAlreadyExistsException)exCopy;
                }
                if (exCopy instanceof javax.management.MBeanRegistrationException) {
                    throw (javax.management.MBeanRegistrationException)exCopy;
                }
                if (exCopy instanceof javax.management.MBeanException) {
                    throw (javax.management.MBeanException)exCopy;
                }
                if (exCopy instanceof javax.management.NotCompliantMBeanException) {
                    throw (javax.management.NotCompliantMBeanException)exCopy;
                }
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ObjectInstance createMBean(String arg0, ObjectName arg1, ObjectName arg2, Subject arg3) throws javax.management.ReflectionException, javax.management.InstanceAlreadyExistsException, javax.management.MBeanRegistrationException, javax.management.MBeanException, javax.management.NotCompliantMBeanException, javax.management.InstanceNotFoundException, java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("createMBean__CORBA_WStringValue__javax_management_ObjectName__javax_management_ObjectName__javax_security_auth_Subject", true);
                    out.write_value(arg0,String.class);
                    out.write_value(arg1,ObjectName.class);
                    out.write_value(arg2,ObjectName.class);
                    out.write_value(arg3,Subject.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ObjectInstance) in.read_value(ObjectInstance.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:javax/management/ReflectionEx:1.0")) {
                        throw (javax.management.ReflectionException) in.read_value(javax.management.ReflectionException.class);
                    }
                    if ($_id.equals("IDL:javax/management/InstanceAlreadyExistsEx:1.0")) {
                        throw (javax.management.InstanceAlreadyExistsException) in.read_value(javax.management.InstanceAlreadyExistsException.class);
                    }
                    if ($_id.equals("IDL:javax/management/MBeanRegistrationEx:1.0")) {
                        throw (javax.management.MBeanRegistrationException) in.read_value(javax.management.MBeanRegistrationException.class);
                    }
                    if ($_id.equals("IDL:javax/management/MBeanEx:1.0")) {
                        throw (javax.management.MBeanException) in.read_value(javax.management.MBeanException.class);
                    }
                    if ($_id.equals("IDL:javax/management/NotCompliantMBeanEx:1.0")) {
                        throw (javax.management.NotCompliantMBeanException) in.read_value(javax.management.NotCompliantMBeanException.class);
                    }
                    if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                        throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                    }
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return createMBean(arg0,arg1,arg2,arg3);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("createMBean__CORBA_WStringValue__javax_management_ObjectName__javax_management_ObjectName__javax_security_auth_Subject",RMIConnection.class);
            if (so == null) {
                return createMBean(arg0, arg1, arg2, arg3);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3},_orb());
                String arg0Copy = (String) copies[0];
                ObjectName arg1Copy = (ObjectName) copies[1];
                ObjectName arg2Copy = (ObjectName) copies[2];
                Subject arg3Copy = (Subject) copies[3];
                ObjectInstance result = ((RMIConnection)so.servant).createMBean(arg0Copy, arg1Copy, arg2Copy, arg3Copy);
                return (ObjectInstance)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof javax.management.ReflectionException) {
                    throw (javax.management.ReflectionException)exCopy;
                }
                if (exCopy instanceof javax.management.InstanceAlreadyExistsException) {
                    throw (javax.management.InstanceAlreadyExistsException)exCopy;
                }
                if (exCopy instanceof javax.management.MBeanRegistrationException) {
                    throw (javax.management.MBeanRegistrationException)exCopy;
                }
                if (exCopy instanceof javax.management.MBeanException) {
                    throw (javax.management.MBeanException)exCopy;
                }
                if (exCopy instanceof javax.management.NotCompliantMBeanException) {
                    throw (javax.management.NotCompliantMBeanException)exCopy;
                }
                if (exCopy instanceof javax.management.InstanceNotFoundException) {
                    throw (javax.management.InstanceNotFoundException)exCopy;
                }
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ObjectInstance createMBean(String arg0, ObjectName arg1, MarshalledObject arg2, String[] arg3, Subject arg4) throws javax.management.ReflectionException, javax.management.InstanceAlreadyExistsException, javax.management.MBeanRegistrationException, javax.management.MBeanException, javax.management.NotCompliantMBeanException, java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("createMBean__CORBA_WStringValue__javax_management_ObjectName__java_rmi_MarshalledObject__org_omg_boxedRMI_CORBA_seq1_WStringValue__javax_security_auth_Subject", true);
                    out.write_value(arg0,String.class);
                    out.write_value(arg1,ObjectName.class);
                    out.write_value(arg2,MarshalledObject.class);
                    out.write_value(cast_array(arg3),String[].class);
                    out.write_value(arg4,Subject.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ObjectInstance) in.read_value(ObjectInstance.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:javax/management/ReflectionEx:1.0")) {
                        throw (javax.management.ReflectionException) in.read_value(javax.management.ReflectionException.class);
                    }
                    if ($_id.equals("IDL:javax/management/InstanceAlreadyExistsEx:1.0")) {
                        throw (javax.management.InstanceAlreadyExistsException) in.read_value(javax.management.InstanceAlreadyExistsException.class);
                    }
                    if ($_id.equals("IDL:javax/management/MBeanRegistrationEx:1.0")) {
                        throw (javax.management.MBeanRegistrationException) in.read_value(javax.management.MBeanRegistrationException.class);
                    }
                    if ($_id.equals("IDL:javax/management/MBeanEx:1.0")) {
                        throw (javax.management.MBeanException) in.read_value(javax.management.MBeanException.class);
                    }
                    if ($_id.equals("IDL:javax/management/NotCompliantMBeanEx:1.0")) {
                        throw (javax.management.NotCompliantMBeanException) in.read_value(javax.management.NotCompliantMBeanException.class);
                    }
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return createMBean(arg0,arg1,arg2,arg3,arg4);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("createMBean__CORBA_WStringValue__javax_management_ObjectName__java_rmi_MarshalledObject__org_omg_boxedRMI_CORBA_seq1_WStringValue__javax_security_auth_Subject",RMIConnection.class);
            if (so == null) {
                return createMBean(arg0, arg1, arg2, arg3, arg4);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4},_orb());
                String arg0Copy = (String) copies[0];
                ObjectName arg1Copy = (ObjectName) copies[1];
                MarshalledObject arg2Copy = (MarshalledObject) copies[2];
                String[] arg3Copy = (String[]) copies[3];
                Subject arg4Copy = (Subject) copies[4];
                ObjectInstance result = ((RMIConnection)so.servant).createMBean(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy);
                return (ObjectInstance)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof javax.management.ReflectionException) {
                    throw (javax.management.ReflectionException)exCopy;
                }
                if (exCopy instanceof javax.management.InstanceAlreadyExistsException) {
                    throw (javax.management.InstanceAlreadyExistsException)exCopy;
                }
                if (exCopy instanceof javax.management.MBeanRegistrationException) {
                    throw (javax.management.MBeanRegistrationException)exCopy;
                }
                if (exCopy instanceof javax.management.MBeanException) {
                    throw (javax.management.MBeanException)exCopy;
                }
                if (exCopy instanceof javax.management.NotCompliantMBeanException) {
                    throw (javax.management.NotCompliantMBeanException)exCopy;
                }
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ObjectInstance createMBean(String arg0, ObjectName arg1, ObjectName arg2, MarshalledObject arg3, String[] arg4, Subject arg5) throws javax.management.ReflectionException, javax.management.InstanceAlreadyExistsException, javax.management.MBeanRegistrationException, javax.management.MBeanException, javax.management.NotCompliantMBeanException, javax.management.InstanceNotFoundException, java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("createMBean__CORBA_WStringValue__javax_management_ObjectName__javax_management_ObjectName__java_rmi_MarshalledObject__org_omg_boxedRMI_CORBA_seq1_WStringValue__javax_security_auth_Subject", true);
                    out.write_value(arg0,String.class);
                    out.write_value(arg1,ObjectName.class);
                    out.write_value(arg2,ObjectName.class);
                    out.write_value(arg3,MarshalledObject.class);
                    out.write_value(cast_array(arg4),String[].class);
                    out.write_value(arg5,Subject.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ObjectInstance) in.read_value(ObjectInstance.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:javax/management/ReflectionEx:1.0")) {
                        throw (javax.management.ReflectionException) in.read_value(javax.management.ReflectionException.class);
                    }
                    if ($_id.equals("IDL:javax/management/InstanceAlreadyExistsEx:1.0")) {
                        throw (javax.management.InstanceAlreadyExistsException) in.read_value(javax.management.InstanceAlreadyExistsException.class);
                    }
                    if ($_id.equals("IDL:javax/management/MBeanRegistrationEx:1.0")) {
                        throw (javax.management.MBeanRegistrationException) in.read_value(javax.management.MBeanRegistrationException.class);
                    }
                    if ($_id.equals("IDL:javax/management/MBeanEx:1.0")) {
                        throw (javax.management.MBeanException) in.read_value(javax.management.MBeanException.class);
                    }
                    if ($_id.equals("IDL:javax/management/NotCompliantMBeanEx:1.0")) {
                        throw (javax.management.NotCompliantMBeanException) in.read_value(javax.management.NotCompliantMBeanException.class);
                    }
                    if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                        throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                    }
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return createMBean(arg0,arg1,arg2,arg3,arg4,arg5);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("createMBean__CORBA_WStringValue__javax_management_ObjectName__javax_management_ObjectName__java_rmi_MarshalledObject__org_omg_boxedRMI_CORBA_seq1_WStringValue__javax_security_auth_Subject",RMIConnection.class);
            if (so == null) {
                return createMBean(arg0, arg1, arg2, arg3, arg4, arg5);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4,arg5},_orb());
                String arg0Copy = (String) copies[0];
                ObjectName arg1Copy = (ObjectName) copies[1];
                ObjectName arg2Copy = (ObjectName) copies[2];
                MarshalledObject arg3Copy = (MarshalledObject) copies[3];
                String[] arg4Copy = (String[]) copies[4];
                Subject arg5Copy = (Subject) copies[5];
                ObjectInstance result = ((RMIConnection)so.servant).createMBean(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy, arg5Copy);
                return (ObjectInstance)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof javax.management.ReflectionException) {
                    throw (javax.management.ReflectionException)exCopy;
                }
                if (exCopy instanceof javax.management.InstanceAlreadyExistsException) {
                    throw (javax.management.InstanceAlreadyExistsException)exCopy;
                }
                if (exCopy instanceof javax.management.MBeanRegistrationException) {
                    throw (javax.management.MBeanRegistrationException)exCopy;
                }
                if (exCopy instanceof javax.management.MBeanException) {
                    throw (javax.management.MBeanException)exCopy;
                }
                if (exCopy instanceof javax.management.NotCompliantMBeanException) {
                    throw (javax.management.NotCompliantMBeanException)exCopy;
                }
                if (exCopy instanceof javax.management.InstanceNotFoundException) {
                    throw (javax.management.InstanceNotFoundException)exCopy;
                }
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void unregisterMBean(ObjectName arg0, Subject arg1) throws javax.management.InstanceNotFoundException, javax.management.MBeanRegistrationException, java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("unregisterMBean", true);
                    out.write_value(arg0,ObjectName.class);
                    out.write_value(arg1,Subject.class);
                    _invoke(out);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                        throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                    }
                    if ($_id.equals("IDL:javax/management/MBeanRegistrationEx:1.0")) {
                        throw (javax.management.MBeanRegistrationException) in.read_value(javax.management.MBeanRegistrationException.class);
                    }
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    unregisterMBean(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("unregisterMBean",RMIConnection.class);
            if (so == null) {
                unregisterMBean(arg0, arg1);
                return ;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                ObjectName arg0Copy = (ObjectName) copies[0];
                Subject arg1Copy = (Subject) copies[1];
                ((RMIConnection)so.servant).unregisterMBean(arg0Copy, arg1Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof javax.management.InstanceNotFoundException) {
                    throw (javax.management.InstanceNotFoundException)exCopy;
                }
                if (exCopy instanceof javax.management.MBeanRegistrationException) {
                    throw (javax.management.MBeanRegistrationException)exCopy;
                }
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public ObjectInstance getObjectInstance(ObjectName arg0, Subject arg1) throws javax.management.InstanceNotFoundException, java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("getObjectInstance", true);
                    out.write_value(arg0,ObjectName.class);
                    out.write_value(arg1,Subject.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (ObjectInstance) in.read_value(ObjectInstance.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                        throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                    }
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return getObjectInstance(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("getObjectInstance",RMIConnection.class);
            if (so == null) {
                return getObjectInstance(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                ObjectName arg0Copy = (ObjectName) copies[0];
                Subject arg1Copy = (Subject) copies[1];
                ObjectInstance result = ((RMIConnection)so.servant).getObjectInstance(arg0Copy, arg1Copy);
                return (ObjectInstance)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof javax.management.InstanceNotFoundException) {
                    throw (javax.management.InstanceNotFoundException)exCopy;
                }
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Set queryMBeans(ObjectName arg0, MarshalledObject arg1, Subject arg2) throws java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("queryMBeans", true);
                    out.write_value(arg0,ObjectName.class);
                    out.write_value(arg1,MarshalledObject.class);
                    out.write_value(arg2,Subject.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Set) in.read_value(Set.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return queryMBeans(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("queryMBeans",RMIConnection.class);
            if (so == null) {
                return queryMBeans(arg0, arg1, arg2);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                ObjectName arg0Copy = (ObjectName) copies[0];
                MarshalledObject arg1Copy = (MarshalledObject) copies[1];
                Subject arg2Copy = (Subject) copies[2];
                Set result = ((RMIConnection)so.servant).queryMBeans(arg0Copy, arg1Copy, arg2Copy);
                return (Set)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Set queryNames(ObjectName arg0, MarshalledObject arg1, Subject arg2) throws java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("queryNames", true);
                    out.write_value(arg0,ObjectName.class);
                    out.write_value(arg1,MarshalledObject.class);
                    out.write_value(arg2,Subject.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Set) in.read_value(Set.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return queryNames(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("queryNames",RMIConnection.class);
            if (so == null) {
                return queryNames(arg0, arg1, arg2);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                ObjectName arg0Copy = (ObjectName) copies[0];
                MarshalledObject arg1Copy = (MarshalledObject) copies[1];
                Subject arg2Copy = (Subject) copies[2];
                Set result = ((RMIConnection)so.servant).queryNames(arg0Copy, arg1Copy, arg2Copy);
                return (Set)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean isRegistered(ObjectName arg0, Subject arg1) throws java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("isRegistered", true);
                    out.write_value(arg0,ObjectName.class);
                    out.write_value(arg1,Subject.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return isRegistered(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("isRegistered",RMIConnection.class);
            if (so == null) {
                return isRegistered(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                ObjectName arg0Copy = (ObjectName) copies[0];
                Subject arg1Copy = (Subject) copies[1];
                return ((RMIConnection)so.servant).isRegistered(arg0Copy, arg1Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Integer getMBeanCount(Subject arg0) throws java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("getMBeanCount", true);
                    out.write_value(arg0,Subject.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Integer) in.read_value(Integer.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return getMBeanCount(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("getMBeanCount",RMIConnection.class);
            if (so == null) {
                return getMBeanCount(arg0);
            }
            try {
                Subject arg0Copy = (Subject) Util.copyObject(arg0,_orb());
                Integer result = ((RMIConnection)so.servant).getMBeanCount(arg0Copy);
                return (Integer)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Object getAttribute(ObjectName arg0, String arg1, Subject arg2) throws javax.management.MBeanException, javax.management.AttributeNotFoundException, javax.management.InstanceNotFoundException, javax.management.ReflectionException, java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("getAttribute", true);
                    out.write_value(arg0,ObjectName.class);
                    out.write_value(arg1,String.class);
                    out.write_value(arg2,Subject.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return Util.readAny(in);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:javax/management/MBeanEx:1.0")) {
                        throw (javax.management.MBeanException) in.read_value(javax.management.MBeanException.class);
                    }
                    if ($_id.equals("IDL:javax/management/AttributeNotFoundEx:1.0")) {
                        throw (javax.management.AttributeNotFoundException) in.read_value(javax.management.AttributeNotFoundException.class);
                    }
                    if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                        throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                    }
                    if ($_id.equals("IDL:javax/management/ReflectionEx:1.0")) {
                        throw (javax.management.ReflectionException) in.read_value(javax.management.ReflectionException.class);
                    }
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return getAttribute(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("getAttribute",RMIConnection.class);
            if (so == null) {
                return getAttribute(arg0, arg1, arg2);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                ObjectName arg0Copy = (ObjectName) copies[0];
                String arg1Copy = (String) copies[1];
                Subject arg2Copy = (Subject) copies[2];
                Object result = ((RMIConnection)so.servant).getAttribute(arg0Copy, arg1Copy, arg2Copy);
                return (Object)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof javax.management.MBeanException) {
                    throw (javax.management.MBeanException)exCopy;
                }
                if (exCopy instanceof javax.management.AttributeNotFoundException) {
                    throw (javax.management.AttributeNotFoundException)exCopy;
                }
                if (exCopy instanceof javax.management.InstanceNotFoundException) {
                    throw (javax.management.InstanceNotFoundException)exCopy;
                }
                if (exCopy instanceof javax.management.ReflectionException) {
                    throw (javax.management.ReflectionException)exCopy;
                }
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public AttributeList getAttributes(ObjectName arg0, String[] arg1, Subject arg2) throws javax.management.InstanceNotFoundException, javax.management.ReflectionException, java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("getAttributes", true);
                    out.write_value(arg0,ObjectName.class);
                    out.write_value(cast_array(arg1),String[].class);
                    out.write_value(arg2,Subject.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (AttributeList) in.read_value(AttributeList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                        throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                    }
                    if ($_id.equals("IDL:javax/management/ReflectionEx:1.0")) {
                        throw (javax.management.ReflectionException) in.read_value(javax.management.ReflectionException.class);
                    }
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return getAttributes(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("getAttributes",RMIConnection.class);
            if (so == null) {
                return getAttributes(arg0, arg1, arg2);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                ObjectName arg0Copy = (ObjectName) copies[0];
                String[] arg1Copy = (String[]) copies[1];
                Subject arg2Copy = (Subject) copies[2];
                AttributeList result = ((RMIConnection)so.servant).getAttributes(arg0Copy, arg1Copy, arg2Copy);
                return (AttributeList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof javax.management.InstanceNotFoundException) {
                    throw (javax.management.InstanceNotFoundException)exCopy;
                }
                if (exCopy instanceof javax.management.ReflectionException) {
                    throw (javax.management.ReflectionException)exCopy;
                }
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void setAttribute(ObjectName arg0, MarshalledObject arg1, Subject arg2) throws javax.management.InstanceNotFoundException, javax.management.AttributeNotFoundException, javax.management.InvalidAttributeValueException, javax.management.MBeanException, javax.management.ReflectionException, java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("setAttribute", true);
                    out.write_value(arg0,ObjectName.class);
                    out.write_value(arg1,MarshalledObject.class);
                    out.write_value(arg2,Subject.class);
                    _invoke(out);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                        throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                    }
                    if ($_id.equals("IDL:javax/management/AttributeNotFoundEx:1.0")) {
                        throw (javax.management.AttributeNotFoundException) in.read_value(javax.management.AttributeNotFoundException.class);
                    }
                    if ($_id.equals("IDL:javax/management/InvalidAttributeValueEx:1.0")) {
                        throw (javax.management.InvalidAttributeValueException) in.read_value(javax.management.InvalidAttributeValueException.class);
                    }
                    if ($_id.equals("IDL:javax/management/MBeanEx:1.0")) {
                        throw (javax.management.MBeanException) in.read_value(javax.management.MBeanException.class);
                    }
                    if ($_id.equals("IDL:javax/management/ReflectionEx:1.0")) {
                        throw (javax.management.ReflectionException) in.read_value(javax.management.ReflectionException.class);
                    }
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    setAttribute(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("setAttribute",RMIConnection.class);
            if (so == null) {
                setAttribute(arg0, arg1, arg2);
                return ;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                ObjectName arg0Copy = (ObjectName) copies[0];
                MarshalledObject arg1Copy = (MarshalledObject) copies[1];
                Subject arg2Copy = (Subject) copies[2];
                ((RMIConnection)so.servant).setAttribute(arg0Copy, arg1Copy, arg2Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof javax.management.InstanceNotFoundException) {
                    throw (javax.management.InstanceNotFoundException)exCopy;
                }
                if (exCopy instanceof javax.management.AttributeNotFoundException) {
                    throw (javax.management.AttributeNotFoundException)exCopy;
                }
                if (exCopy instanceof javax.management.InvalidAttributeValueException) {
                    throw (javax.management.InvalidAttributeValueException)exCopy;
                }
                if (exCopy instanceof javax.management.MBeanException) {
                    throw (javax.management.MBeanException)exCopy;
                }
                if (exCopy instanceof javax.management.ReflectionException) {
                    throw (javax.management.ReflectionException)exCopy;
                }
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public AttributeList setAttributes(ObjectName arg0, MarshalledObject arg1, Subject arg2) throws javax.management.InstanceNotFoundException, javax.management.ReflectionException, java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("setAttributes", true);
                    out.write_value(arg0,ObjectName.class);
                    out.write_value(arg1,MarshalledObject.class);
                    out.write_value(arg2,Subject.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (AttributeList) in.read_value(AttributeList.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                        throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                    }
                    if ($_id.equals("IDL:javax/management/ReflectionEx:1.0")) {
                        throw (javax.management.ReflectionException) in.read_value(javax.management.ReflectionException.class);
                    }
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return setAttributes(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("setAttributes",RMIConnection.class);
            if (so == null) {
                return setAttributes(arg0, arg1, arg2);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                ObjectName arg0Copy = (ObjectName) copies[0];
                MarshalledObject arg1Copy = (MarshalledObject) copies[1];
                Subject arg2Copy = (Subject) copies[2];
                AttributeList result = ((RMIConnection)so.servant).setAttributes(arg0Copy, arg1Copy, arg2Copy);
                return (AttributeList)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof javax.management.InstanceNotFoundException) {
                    throw (javax.management.InstanceNotFoundException)exCopy;
                }
                if (exCopy instanceof javax.management.ReflectionException) {
                    throw (javax.management.ReflectionException)exCopy;
                }
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Object invoke(ObjectName arg0, String arg1, MarshalledObject arg2, String[] arg3, Subject arg4) throws javax.management.InstanceNotFoundException, javax.management.MBeanException, javax.management.ReflectionException, java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("invoke", true);
                    out.write_value(arg0,ObjectName.class);
                    out.write_value(arg1,String.class);
                    out.write_value(arg2,MarshalledObject.class);
                    out.write_value(cast_array(arg3),String[].class);
                    out.write_value(arg4,Subject.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return Util.readAny(in);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                        throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                    }
                    if ($_id.equals("IDL:javax/management/MBeanEx:1.0")) {
                        throw (javax.management.MBeanException) in.read_value(javax.management.MBeanException.class);
                    }
                    if ($_id.equals("IDL:javax/management/ReflectionEx:1.0")) {
                        throw (javax.management.ReflectionException) in.read_value(javax.management.ReflectionException.class);
                    }
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return invoke(arg0,arg1,arg2,arg3,arg4);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("invoke",RMIConnection.class);
            if (so == null) {
                return invoke(arg0, arg1, arg2, arg3, arg4);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4},_orb());
                ObjectName arg0Copy = (ObjectName) copies[0];
                String arg1Copy = (String) copies[1];
                MarshalledObject arg2Copy = (MarshalledObject) copies[2];
                String[] arg3Copy = (String[]) copies[3];
                Subject arg4Copy = (Subject) copies[4];
                Object result = ((RMIConnection)so.servant).invoke(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy);
                return (Object)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof javax.management.InstanceNotFoundException) {
                    throw (javax.management.InstanceNotFoundException)exCopy;
                }
                if (exCopy instanceof javax.management.MBeanException) {
                    throw (javax.management.MBeanException)exCopy;
                }
                if (exCopy instanceof javax.management.ReflectionException) {
                    throw (javax.management.ReflectionException)exCopy;
                }
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public String getDefaultDomain(Subject arg0) throws java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("getDefaultDomain", true);
                    out.write_value(arg0,Subject.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (String) in.read_value(String.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return getDefaultDomain(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("getDefaultDomain",RMIConnection.class);
            if (so == null) {
                return getDefaultDomain(arg0);
            }
            try {
                Subject arg0Copy = (Subject) Util.copyObject(arg0,_orb());
                return ((RMIConnection)so.servant).getDefaultDomain(arg0Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public String[] getDomains(Subject arg0) throws java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("getDomains", true);
                    out.write_value(arg0,Subject.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (String[]) in.read_value(String[].class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return getDomains(arg0);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("getDomains",RMIConnection.class);
            if (so == null) {
                return getDomains(arg0);
            }
            try {
                Subject arg0Copy = (Subject) Util.copyObject(arg0,_orb());
                String[] result = ((RMIConnection)so.servant).getDomains(arg0Copy);
                return (String[])Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public MBeanInfo getMBeanInfo(ObjectName arg0, Subject arg1) throws javax.management.InstanceNotFoundException, javax.management.IntrospectionException, javax.management.ReflectionException, java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("getMBeanInfo", true);
                    out.write_value(arg0,ObjectName.class);
                    out.write_value(arg1,Subject.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (MBeanInfo) in.read_value(MBeanInfo.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                        throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                    }
                    if ($_id.equals("IDL:javax/management/IntrospectionEx:1.0")) {
                        throw (javax.management.IntrospectionException) in.read_value(javax.management.IntrospectionException.class);
                    }
                    if ($_id.equals("IDL:javax/management/ReflectionEx:1.0")) {
                        throw (javax.management.ReflectionException) in.read_value(javax.management.ReflectionException.class);
                    }
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return getMBeanInfo(arg0,arg1);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("getMBeanInfo",RMIConnection.class);
            if (so == null) {
                return getMBeanInfo(arg0, arg1);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1},_orb());
                ObjectName arg0Copy = (ObjectName) copies[0];
                Subject arg1Copy = (Subject) copies[1];
                MBeanInfo result = ((RMIConnection)so.servant).getMBeanInfo(arg0Copy, arg1Copy);
                return (MBeanInfo)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof javax.management.InstanceNotFoundException) {
                    throw (javax.management.InstanceNotFoundException)exCopy;
                }
                if (exCopy instanceof javax.management.IntrospectionException) {
                    throw (javax.management.IntrospectionException)exCopy;
                }
                if (exCopy instanceof javax.management.ReflectionException) {
                    throw (javax.management.ReflectionException)exCopy;
                }
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public boolean isInstanceOf(ObjectName arg0, String arg1, Subject arg2) throws javax.management.InstanceNotFoundException, java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("isInstanceOf", true);
                    out.write_value(arg0,ObjectName.class);
                    out.write_value(arg1,String.class);
                    out.write_value(arg2,Subject.class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return in.read_boolean();
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                        throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                    }
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return isInstanceOf(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("isInstanceOf",RMIConnection.class);
            if (so == null) {
                return isInstanceOf(arg0, arg1, arg2);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                ObjectName arg0Copy = (ObjectName) copies[0];
                String arg1Copy = (String) copies[1];
                Subject arg2Copy = (Subject) copies[2];
                return ((RMIConnection)so.servant).isInstanceOf(arg0Copy, arg1Copy, arg2Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof javax.management.InstanceNotFoundException) {
                    throw (javax.management.InstanceNotFoundException)exCopy;
                }
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void addNotificationListener(ObjectName arg0, ObjectName arg1, MarshalledObject arg2, MarshalledObject arg3, Subject arg4) throws javax.management.InstanceNotFoundException, java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("addNotificationListener", true);
                    out.write_value(arg0,ObjectName.class);
                    out.write_value(arg1,ObjectName.class);
                    out.write_value(arg2,MarshalledObject.class);
                    out.write_value(arg3,MarshalledObject.class);
                    out.write_value(arg4,Subject.class);
                    _invoke(out);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                        throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                    }
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    addNotificationListener(arg0,arg1,arg2,arg3,arg4);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("addNotificationListener",RMIConnection.class);
            if (so == null) {
                addNotificationListener(arg0, arg1, arg2, arg3, arg4);
                return ;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4},_orb());
                ObjectName arg0Copy = (ObjectName) copies[0];
                ObjectName arg1Copy = (ObjectName) copies[1];
                MarshalledObject arg2Copy = (MarshalledObject) copies[2];
                MarshalledObject arg3Copy = (MarshalledObject) copies[3];
                Subject arg4Copy = (Subject) copies[4];
                ((RMIConnection)so.servant).addNotificationListener(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof javax.management.InstanceNotFoundException) {
                    throw (javax.management.InstanceNotFoundException)exCopy;
                }
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void removeNotificationListener(ObjectName arg0, ObjectName arg1, Subject arg2) throws javax.management.InstanceNotFoundException, javax.management.ListenerNotFoundException, java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("removeNotificationListener__javax_management_ObjectName__javax_management_ObjectName__javax_security_auth_Subject", true);
                    out.write_value(arg0,ObjectName.class);
                    out.write_value(arg1,ObjectName.class);
                    out.write_value(arg2,Subject.class);
                    _invoke(out);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                        throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                    }
                    if ($_id.equals("IDL:javax/management/ListenerNotFoundEx:1.0")) {
                        throw (javax.management.ListenerNotFoundException) in.read_value(javax.management.ListenerNotFoundException.class);
                    }
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    removeNotificationListener(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("removeNotificationListener__javax_management_ObjectName__javax_management_ObjectName__javax_security_auth_Subject",RMIConnection.class);
            if (so == null) {
                removeNotificationListener(arg0, arg1, arg2);
                return ;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                ObjectName arg0Copy = (ObjectName) copies[0];
                ObjectName arg1Copy = (ObjectName) copies[1];
                Subject arg2Copy = (Subject) copies[2];
                ((RMIConnection)so.servant).removeNotificationListener(arg0Copy, arg1Copy, arg2Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof javax.management.InstanceNotFoundException) {
                    throw (javax.management.InstanceNotFoundException)exCopy;
                }
                if (exCopy instanceof javax.management.ListenerNotFoundException) {
                    throw (javax.management.ListenerNotFoundException)exCopy;
                }
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void removeNotificationListener(ObjectName arg0, ObjectName arg1, MarshalledObject arg2, MarshalledObject arg3, Subject arg4) throws javax.management.InstanceNotFoundException, javax.management.ListenerNotFoundException, java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("removeNotificationListener__javax_management_ObjectName__javax_management_ObjectName__java_rmi_MarshalledObject__java_rmi_MarshalledObject__javax_security_auth_Subject", true);
                    out.write_value(arg0,ObjectName.class);
                    out.write_value(arg1,ObjectName.class);
                    out.write_value(arg2,MarshalledObject.class);
                    out.write_value(arg3,MarshalledObject.class);
                    out.write_value(arg4,Subject.class);
                    _invoke(out);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                        throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                    }
                    if ($_id.equals("IDL:javax/management/ListenerNotFoundEx:1.0")) {
                        throw (javax.management.ListenerNotFoundException) in.read_value(javax.management.ListenerNotFoundException.class);
                    }
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    removeNotificationListener(arg0,arg1,arg2,arg3,arg4);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("removeNotificationListener__javax_management_ObjectName__javax_management_ObjectName__java_rmi_MarshalledObject__java_rmi_MarshalledObject__javax_security_auth_Subject",RMIConnection.class);
            if (so == null) {
                removeNotificationListener(arg0, arg1, arg2, arg3, arg4);
                return ;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2,arg3,arg4},_orb());
                ObjectName arg0Copy = (ObjectName) copies[0];
                ObjectName arg1Copy = (ObjectName) copies[1];
                MarshalledObject arg2Copy = (MarshalledObject) copies[2];
                MarshalledObject arg3Copy = (MarshalledObject) copies[3];
                Subject arg4Copy = (Subject) copies[4];
                ((RMIConnection)so.servant).removeNotificationListener(arg0Copy, arg1Copy, arg2Copy, arg3Copy, arg4Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof javax.management.InstanceNotFoundException) {
                    throw (javax.management.InstanceNotFoundException)exCopy;
                }
                if (exCopy instanceof javax.management.ListenerNotFoundException) {
                    throw (javax.management.ListenerNotFoundException)exCopy;
                }
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public Integer[] addNotificationListeners(ObjectName[] arg0, MarshalledObject[] arg1, Subject[] arg2) throws javax.management.InstanceNotFoundException, java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("addNotificationListeners", true);
                    out.write_value(cast_array(arg0),ObjectName[].class);
                    out.write_value(cast_array(arg1),MarshalledObject[].class);
                    out.write_value(cast_array(arg2),Subject[].class);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (Integer[]) in.read_value(Integer[].class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                        throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                    }
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return addNotificationListeners(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("addNotificationListeners",RMIConnection.class);
            if (so == null) {
                return addNotificationListeners(arg0, arg1, arg2);
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                ObjectName[] arg0Copy = (ObjectName[]) copies[0];
                MarshalledObject[] arg1Copy = (MarshalledObject[]) copies[1];
                Subject[] arg2Copy = (Subject[]) copies[2];
                Integer[] result = ((RMIConnection)so.servant).addNotificationListeners(arg0Copy, arg1Copy, arg2Copy);
                return (Integer[])Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof javax.management.InstanceNotFoundException) {
                    throw (javax.management.InstanceNotFoundException)exCopy;
                }
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public void removeNotificationListeners(ObjectName arg0, Integer[] arg1, Subject arg2) throws javax.management.InstanceNotFoundException, javax.management.ListenerNotFoundException, java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    org.omg.CORBA_2_3.portable.OutputStream out = 
                        (org.omg.CORBA_2_3.portable.OutputStream)
                        _request("removeNotificationListeners", true);
                    out.write_value(arg0,ObjectName.class);
                    out.write_value(cast_array(arg1),Integer[].class);
                    out.write_value(arg2,Subject.class);
                    _invoke(out);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:javax/management/InstanceNotFoundEx:1.0")) {
                        throw (javax.management.InstanceNotFoundException) in.read_value(javax.management.InstanceNotFoundException.class);
                    }
                    if ($_id.equals("IDL:javax/management/ListenerNotFoundEx:1.0")) {
                        throw (javax.management.ListenerNotFoundException) in.read_value(javax.management.ListenerNotFoundException.class);
                    }
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    removeNotificationListeners(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("removeNotificationListeners",RMIConnection.class);
            if (so == null) {
                removeNotificationListeners(arg0, arg1, arg2);
                return ;
            }
            try {
                Object[] copies = Util.copyObjects(new Object[]{arg0,arg1,arg2},_orb());
                ObjectName arg0Copy = (ObjectName) copies[0];
                Integer[] arg1Copy = (Integer[]) copies[1];
                Subject arg2Copy = (Subject) copies[2];
                ((RMIConnection)so.servant).removeNotificationListeners(arg0Copy, arg1Copy, arg2Copy);
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof javax.management.InstanceNotFoundException) {
                    throw (javax.management.InstanceNotFoundException)exCopy;
                }
                if (exCopy instanceof javax.management.ListenerNotFoundException) {
                    throw (javax.management.ListenerNotFoundException)exCopy;
                }
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    public NotificationResult fetchNotifications(long arg0, int arg1, long arg2) throws java.io.IOException {
        if (!Util.isLocal(this)) {
            try {
                org.omg.CORBA_2_3.portable.InputStream in = null;
                try {
                    OutputStream out = _request("fetchNotifications", true);
                    out.write_longlong(arg0);
                    out.write_long(arg1);
                    out.write_longlong(arg2);
                    in = (org.omg.CORBA_2_3.portable.InputStream)_invoke(out);
                    return (NotificationResult) in.read_value(NotificationResult.class);
                } catch (ApplicationException ex) {
                    in = (org.omg.CORBA_2_3.portable.InputStream) ex.getInputStream();
                    String $_id = in.read_string();
                    if ($_id.equals("IDL:java/io/IOEx:1.0")) {
                        throw (java.io.IOException) in.read_value(java.io.IOException.class);
                    }
                    throw new UnexpectedException($_id);
                } catch (RemarshalException ex) {
                    return fetchNotifications(arg0,arg1,arg2);
                } finally {
                    _releaseReply(in);
                }
            } catch (SystemException ex) {
                throw Util.mapSystemException(ex);
            }
        } else {
            ServantObject so = _servant_preinvoke("fetchNotifications",RMIConnection.class);
            if (so == null) {
                return fetchNotifications(arg0, arg1, arg2);
            }
            try {
                NotificationResult result = ((RMIConnection)so.servant).fetchNotifications(arg0, arg1, arg2);
                return (NotificationResult)Util.copyObject(result,_orb());
            } catch (Throwable ex) {
                Throwable exCopy = (Throwable)Util.copyObject(ex,_orb());
                if (exCopy instanceof java.io.IOException) {
                    throw (java.io.IOException)exCopy;
                }
                throw Util.wrapException(exCopy);
            } finally {
                _servant_postinvoke(so);
            }
        }
    }
    
    // This method is required as a work-around for
    // a bug in the JDK 1.1.6 verifier.
    
    private Serializable cast_array(Object obj) {
        return (Serializable)obj;
    }
}
