// Tie class generated by rmic, do not edit.
// Contents subject to change without notice.

package javax.management.remote.rmi;

import java.io.IOException;
import java.io.Serializable;
import java.rmi.Remote;
import java.rmi.RemoteException;
import javax.rmi.CORBA.Tie;
import javax.rmi.CORBA.Util;
import javax.rmi.PortableRemoteObject;
import org.omg.CORBA.BAD_OPERATION;
import org.omg.CORBA.ORB;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.ResponseHandler;
import org.omg.CORBA.portable.UnknownException;
import org.omg.CORBA_2_3.portable.ObjectImpl;

import javax.management.remote.rmi.*  ;

public class _RMIServerImpl_Tie extends ObjectImpl implements Tie {
    
    private RMIServerImpl target = null;
    
    private static final String[] _type_ids = {
        "RMI:javax.management.remote.rmi.RMIServer:0000000000000000"
    };
    
    public void setTarget(Remote target) {
        this.target = (RMIServerImpl) target;
    }
    
    public Remote getTarget() {
        return target;
    }
    
    public org.omg.CORBA.Object thisObject() {
        return this;
    }
    
    public void deactivate() {
        _orb().disconnect(this);
        _set_delegate(null);
        target = null;
    }
    
    public ORB orb() {
        return _orb();
    }
    
    public void orb(ORB orb) {
        orb.connect(this);
    }
    
    public String[] _ids() { 
        return _type_ids;
    }
    
    public OutputStream  _invoke(String method, InputStream _in, ResponseHandler reply) throws SystemException {
        try {
            org.omg.CORBA_2_3.portable.InputStream in = 
                (org.omg.CORBA_2_3.portable.InputStream) _in;
            switch (method.length()) {
                case 9: 
                    if (method.equals("newClient")) {
                        Object arg0 = Util.readAny(in);
                        RMIConnection result;
                        try {
                            result = target.newClient(arg0);
                        } catch (IOException ex) {
                            String id = "IDL:java/io/IOEx:1.0";
                            org.omg.CORBA_2_3.portable.OutputStream out = 
                                (org.omg.CORBA_2_3.portable.OutputStream) reply.createExceptionReply();
                            out.write_string(id);
                            out.write_value(ex,IOException.class);
                            return out;
                        }
                        OutputStream out = reply.createReply();
                        Util.writeRemoteObject(out,result);
                        return out;
                    }
                case 12: 
                    if (method.equals("_get_version")) {
                        String result = target.getVersion();
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
                        out.write_value(result,String.class);
                        return out;
                    }
            }
            throw new BAD_OPERATION();
        } catch (SystemException ex) {
            throw ex;
        } catch (Throwable ex) {
            throw new UnknownException(ex);
        }
    }
}
